module.exports = async (page, scenario, vp) => {
  await page.waitForLoadState('load');
  await page.waitForLoadState('networkidle');

  // const dialogSelector = 'dialog[open]';

  // try {
  //   await page.waitForSelector(dialogSelector, { state: 'visible', timeout: 30000 });
  //   console.log('üëÄ Dialog –ø–æ—è–≤–∏–ª—Å—è.');
  //   try {
  //     await page.waitForSelector(dialogSelector, { state: 'hidden', timeout: 30000 });
  //     console.log('‚úÖ Dialog –∏—Å—á–µ–∑, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.');
  //   } catch {
  //     console.log('‚ö†Ô∏è Dialog –Ω–µ –∏—Å—á–µ–∑ –∑–∞ 30 —Å–µ–∫, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–º, —á—Ç–æ –µ—Å—Ç—å.');
  //   }
  // } catch {
  //   console.log('‚ö†Ô∏è Dialog —Ç–∞–∫ –∏ –Ω–µ –ø–æ—è–≤–∏–ª—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.');
  // }

  await page.waitForSelector('dialog[open]', { state: 'hidden', timeout: 60000 });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∏–∫
  // await clickWhenReady(page, 'text=Get started', 10000);
  await page.getByText('Get started', { exact: true }).click();
  await page.waitForTimeout(2500);

  // await clickWhenReady(page, { role: 'button', name: 'Page 6' });
  await page.getByRole('button', { name: 'Page 6' }).click();
  await page.waitForTimeout(5000);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∏–∫–∞
// async function clickWhenReady(page, selectorOrOptions, timeout = 10000) {
//   try {
//     let el;

//     if (typeof selectorOrOptions === 'string') {
//       // –û–±—ã—á–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
//       el = page.locator(selectorOrOptions);
//     } else if (typeof selectorOrOptions === 'object' && selectorOrOptions.role) {
//       // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ getByRole
//       el = page.getByRole(selectorOrOptions.role, { name: selectorOrOptions.name });
//     } else {
//       throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è clickWhenReady');
//     }

//     await el.waitFor({ state: 'visible', timeout });
//     await el.scrollIntoViewIfNeeded();
//     await el.click({ force: true });

//     console.log(`‚úÖ –ö–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É "${JSON.stringify(selectorOrOptions)}" –≤—ã–ø–æ–ª–Ω–µ–Ω`);
//   } catch {
//     console.log(`‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç "${JSON.stringify(selectorOrOptions)}" –Ω–µ –ø–æ—è–≤–∏–ª—Å—è –∑–∞ ${timeout / 1000} —Å–µ–∫. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª–∏–∫.`);
//   }
// }
